include "entity.rgbinc"
include "collide.rgbinc"
include "coord.rgbinc"


section "hSim", hram
hSim::
	.gravity:: db
	.tick: db
	.global_accel: db


section "wEntity", wram0, align[8]
wEntity:: ds ENTITY_COUNT_MAX * szEntity
_pad: ds 256 - (@ - wEntity)


section "Entity Testo", rom0
EntityTesto::
	ld hl, wEntity
	ld c, ENTITY_COUNT_MAX
:
	ld a, ENTINFOF_ALIVE | $01
	ld [hl+], a
	ld a, ENTITY_COUNT_MAX
	sub c
	ld [hl+], a
	; accx
	ld a, -10 :: ld [hl+], a
	; velx
	ld a, -100 :: ld [hl+], a
	; posx
	coord_ld_hli_int (WORLD_ORIGIN >> 4) + 90
	; accy
	ld a, -10 :: ld [hl+], a
	; vely
	ld a, -100 :: ld [hl+], a
	; posy
	coord_ld_hli_int (WORLD_ORIGIN >> 4) + 50

	ld a, l
	and $F0
	add szEntity
	ld l, a

	dec c
	jr nz, :-
	ret


section "Entity", rom0
EntityInit::
	ld hl, wEntity
	ld b, ENTITY_COUNT_MAX
.entity_pool_loop
	ld c, szEntity
:
	ld [hl+], a
	dec c
	jr nz, :-
	dec b
	jr nz, .entity_pool_loop

	call EntityTesto

	ld a, GRAVITY_DEFAULT
	ldh [hSim.gravity], a
	xor a
	ldh [hSim.tick], a
	ldh [hSim.global_accel], a
	ret


; @mut: AF, BC, DE, HL
EntityUpdate::
;	ldh a, [hSim.global_accel] :: ld b, a
	ld b, 0
	; Should apply gravity?
	ldh a, [hSim.tick]
	bit 0, a
	jr z, :+
	ldh a, [hSim.gravity]
	ld b, a
:
	ldh a, [hSim.global_accel]
	add b
	ldh [hSim.global_accel], a

	ld hl, wEntity
.loop
	bit ENTINFOB_ALIVE, [hl] :: jr z, .next

	; Update motion X, zero constant accel
	entity_index Entity_AccX
	xor a :: call _motion_go
	ld a, c :: ldh [hCollide.px+0], a
	ld a, b :: ldh [hCollide.px+1], a
	push bc

	; Flap!
	entity_index Entity_Ctrl
	call _flap_update :: ld b, a

	; Update motion Y, add gravity and flap as constant accel
	entity_index Entity_AccY
	ldh a, [hSim.global_accel]
	add b :: call _motion_go
	ld a, c :: ldh [hCollide.py+0], a
	ld a, b :: ldh [hCollide.py+1], a

	; some kind of collision / trainwreck
	push bc
	push hl
	call CollidePoint
	pop hl
	; Y
	pop bc
	bit bCOLLIDE_RESULT_Y, a
	jr z, :+
	entity_index Entity_PosY + 1

	ld a, [wCollideResult.dpy + 0] :: ld e, a
	ld a, [wCollideResult.dpy + 1] :: ld d, a
	coord_add bc, de
	; correct ent position and update collision query point for X axis
	ld a, b :: ld [hl-], a
	ldh [hCollide.py+1], a
	ld a, c :: ld [hl-], a
	ldh [hCollide.py+0], a
	xor a :: ld [hl-], a
:
	; X
	pop bc
	ld a, [wCollideResult.flags]
	bit bCOLLIDE_RESULT_X, a
	jr z, :+
	entity_index Entity_PosX + 1

	ld a, [wCollideResult.dpx + 0] :: ld e, a
	ld a, [wCollideResult.dpx + 1] :: ld d, a
	coord_add bc, de
	ld a, b :: ld [hl-], a
	ld a, c :: ld [hl-], a
	xor a :: ld [hl-], a
:

.next
assert sizeof("wEntity") == 256
	entity_index szEntity
	jp nc, .loop

	ldh a, [hSim.tick]
	inc a
	ldh [hSim.tick], a
	xor a
	ldh [hSim.global_accel], a
	ret


;; Update flap effect and return current flap impulse (Y axis accel)
;; @param HL: pointer to entity ctrl field
;; @ret A: flap impulse
;; @mut: AF
_flap_update:
	ld a, mENTCTRL_FLAP
	and [hl]
	ret z
	; count down
	dec [hl]
	; calculate flap impulse/accel
	cpl :: inc a
	ret


; Perform entity motion update (~integration~) on one axis.
; @param HL: Pointer to beginning of an Entity motion block.
; @param A: constant accel
; @ret HL: end (exclusive) of motion block.
; @ret BC: position
; @mut: AF, BC, HL
_motion_go:
	; Add accel accumulator to the constant accel param. Hold on to that.
	add [hl] :: ld b, a
	; Clear the accumulator
	xor a :: ld [hl+], a

	; Update velocity -- apply friction and acceleration.
	ld a, [hl]
	; TODO: select friction,drag model appropriate to current state.
	call _fric_1_16
	; Apply friction
	add [hl]
	; Apply accel
	; TODO: handle potential overflow (vel + accel)
	add b
	; Limit velocity
	ld c, a
	ld a, ENT_VELOCITY_MAX
	call _clampo
	ld a, c
	; Grab the "old" velocity value before writing the updated one.
	ld b, [hl]
	ld [hl+], a

	; Scale velocity before applying it
	ld a, b
	rlca
	jr nc, :+
	dec b
	sra b :: sra b :: sra b; :: sra b
	inc b
	jr .apply_velocity
:
	sra b :: sra b :: sra b; :: sra b

.apply_velocity
	; Update position (16 bit + signed 8 bit)
	ld a, b
	add [hl]
	ld c, a
	ld [hl+], a
	adc [hl]
	rl b ; Set F.C from sign of velocity
	sbc c
	ld b, a
	ld [hl+], a
	ret


; Clamp the magnitude of a signed value.
; @param C: value
; @param A: max magnitude, inclusive
; @ret C: clamped value
; @mut: AF, C
_clampo:
	bit 7, c :: jr nz, :+
	; positive value
	cp c
	jr .end
:
	; negate max to match negative value
	cpl :: inc a
	cp c
	ccf
.end
	ret nc ; within bounds
	ld c, a ; clamp
	ret


; Calculate simple friction (1/16) for the given velocity.
; The result is an acceleration (with magnitude in the range `[1..abs(vel)]`) opposed to the direction (sign) of the input velocity, or zero if the velocity is zero.
; @param A: vel
; @ret A: friction(vel)
; @mut: AF
_fric_1_16:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	swap a :: and $0E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	swap a :: and $0E
	inc a
	ret

_fric_1_32:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rlca :: rlca :: rlca :: and $06
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rlca :: rlca :: rlca :: and $06
	inc a
	ret

_fric_1_8:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: rrca :: rrca :: and $1E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: rrca :: rrca :: and $1E
	inc a
	ret

_fric_1_4:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: rrca :: and $3E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: rrca :: and $3E
	inc a
	ret

_fric_1_2:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: and $7E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: and $7E
	inc a
	ret

