include "entity.rgbinc"
include "collide.rgbinc"
include "coord.rgbinc"


section "hSim", hram
hSim::
	.gravity:: db
	.tick:: db


section "wEntity", wram0, align[8]
wEntity:: ds ENTITY_COUNT_MAX * szEntity
_pad: ds 256 - (@ - wEntity)


section "Entity", rom0
EntityInit::
	ld hl, wEntity
	ld b, ENTITY_COUNT_MAX
.entity_pool_loop
	ld c, szEntity
:
	ld [hl+], a
	dec c
	jr nz, :-
	dec b
	jr nz, .entity_pool_loop

	ld a, GRAVITY_DEFAULT
	ldh [hSim.gravity], a
	xor a
	ldh [hSim.tick], a

	ret


; @mut: AF, BC, DE, HL
EntityUpdate::
	ld hl, wEntity
.loop
	bit ENTINFOB_ALIVE, [hl] :: jr z, .next

	; Update motion X, zero constant accel
	entity_index Entity_AccX
	xor a :: call _velocity_update
	call _velocity_deflate
	ld de, SPEED_RANGE_CLAMP_PARAM
	call ClampS8
	ld a, b :: ldh [hCollide.vx], a
	ld a, [hl+] :: ldh [hCollide.px+0], a
	ld a, [hl+] :: ldh [hCollide.px+1], a

	; Flap!
	entity_index Entity_Ctrl
	call _flap_update :: ld b, a
	call _get_gravity :: add b :: ld b, a

	entity_index Entity_AccY
	ld a, b :: call _velocity_update
	call _velocity_deflate
	ld de, SPEED_RANGE_CLAMP_PARAM
	call ClampS8
	ld a, b :: ldh [hCollide.vy], a
	ld a, [hl+] :: ldh [hCollide.py+0], a
	ld a, [hl+] :: ldh [hCollide.py+1], a

	push hl
	call CollidePointMotion
	pop hl

	call _process_collide_result

.next
assert sizeof("wEntity") == 256
	entity_index szEntity
	jp nc, .loop

	ldh a, [hSim.tick]
	inc a
	ldh [hSim.tick], a
	ret


_process_collide_result:
	entity_index Entity_PosX
	ldh a, [hCollide.px+0] :: ld [hl+], a
	ldh a, [hCollide.px+1] :: ld [hl+], a
	entity_index Entity_PosY
	ldh a, [hCollide.py+0] :: ld [hl+], a
	ldh a, [hCollide.py+1] :: ld [hl+], a

	ldh a, [hCollide.result]
	bit bCollideResult_SOLID, a
	ret z

	ld e, a
	bit bCollideResult_X, e
	jr z, :+
		entity_index Entity_VelX
		xor a :: ld [hl+], a
:
	bit bCollideResult_Y, e
	jr z, :+
		entity_index Entity_VelY
		xor a :: ld [hl+], a
:

	ret


;; @param HL: Pointer to beginning of an Entity motion block.
;; @param A: constant accel
;; @ret B: velocity for the current frame
;; @ret C: updated velocity
;; @mut: AF, BC, HL
_velocity_update:
	; combine accel with accumulated accel
	ld b, a
	ld c, [hl]
	call AddS8_sat
	; clear accel accumulator
	xor a :: ld [hl+], a

	; Apply accel (v + a)
	ld b, [hl]
	call AddS8_sat

	; Apply friction|drag but not on every frame!
	ldh a, [hSim.tick]
	and SIM_DRAG_TICK
	jr nz, .no_drag

	ld a, b :: call _fric_1_32
	add c :: ld c, a
.no_drag

	ld b, [hl]
	ld a, c :: ld [hl+], a

	ret


macro velocity_deflate_positive
	sra b :: sra b; :: sra b; :: sra b
endm


_velocity_deflate:
	rlca
	jr nc, .positive
	xor a :: sub b :: ld b, a
	velocity_deflate_positive
	xor a :: sub b :: ld b, a
	ret
.positive
	velocity_deflate_positive
	ret


;; Update flap effect and return current flap impulse (Y axis accel)
;; @param HL: pointer to entity ctrl field
;; @ret A: flap impulse
;; @mut: AF
_flap_update:
	ld a, mENTCTRL_FLAP
	and [hl]
	ret z
	; count down
	dec [hl]
	; calculate flap impulse/accel
	cpl :: inc a
	ret


;; Get gravity accel for an entity
;; @param HL: pointer to entity ctrl field
;; @ret A: gravity accel to apply
;; @mut: AF
_get_gravity:
	bit bENTCTRL_NOGRAV, [hl]
	jr nz, .nograv
	ldh a, [hSim.tick]
	and SIM_GRAVITY_TICK
	jr nz, .nograv
	ldh a, [hSim.gravity]
	ret
.nograv
	xor a
	ret


;; Returns +/- 1, with the sign opposite the input velocity.
;; @param A: vel
;; @ret A: friction(vel)
;; @mut: AF
_fric_min:
	rlca
	ret z
	sbc a :: cpl :: or 1
	ret


; Calculate simple friction (1/16) for the given velocity.
; The result is an acceleration (with magnitude in the range `[1..abs(vel)]`) opposed to the direction (sign) of the input velocity, or zero if the velocity is zero.
; @param A: vel
; @ret A: friction(vel)
; @mut: AF
_fric_1_16:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	swap a :: and $0E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	swap a :: and $0E
	inc a
	ret

_fric_1_32:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rlca :: rlca :: rlca :: and $06
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rlca :: rlca :: rlca :: and $06
	inc a
	ret

_fric_1_8:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: rrca :: rrca :: and $1E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: rrca :: rrca :: and $1E
	inc a
	ret

_fric_1_4:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: rrca :: and $3E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: rrca :: and $3E
	inc a
	ret

_fric_1_2:
	and a :: ret z
	cp $80
	jr nc, .negative
	; positive: divide first
	rrca :: and $7E
	cpl; :: inc a
	;dec a
	ret
.negative
	; negative: invert first
	cpl :: inc a
	rrca :: and $7E
	inc a
	ret

