include "map.rgbinc"
include "hardware.inc"
include "banker.rgbinc"


def MAP_SIZE equ 32 * 32
def MAP_CHUNK_SIZE equ 16 * 16
def MAP_CHUNK_BUFFER_COUNT equ 9
def MAP_CHR_BUFFER_BANK equ 6
def MAP_ATRB_BUFFER_BANK equ 7


;; Slot status enum/flags
rsreset
;; Slot status bit range used for assigned buffer ID.
;; Buffer ID is the identifying bits of the buffer's address: `id = high(addr) - $D0`
def bSLOT_BUFFER rb 4
;; Set after the chunk in the slot has been rendered.
def bSLOT_RENDERED rb 1
;; Set if there is no chunk to render in the slot.
def bSLOT_NOCHUNK rb 1

def SLOT_BUFFER equ $0F
def SLOT_RENDERED equ 1 << bSLOT_RENDERED
def SLOT_NOCHUNK  equ 1 << bSLOT_NOCHUNK


section "hMap", hram
;; Bank of the selected map
hMapBank:: db
;; Selected map address
hMapAddr:: dw

hMapViewChunkY: db
hMapViewChunkX: db
hMapViewChunkNewY: db
hMapViewChunkNewX: db
hMapChunkSlots: ds MAP_CHUNK_BUFFER_COUNT
hMapChunkSlotsScratch: ds 3

;; The index of the next chunk slot to update
hMapSlotIdx: db


section "hXfer", hram
_destY: db
_destX: db

_xfer0dest: dw
_xfer0len: db
_x0: db
_xfer0src: dw

_xfer1dest: dw
_xfer1len: db
_x1: db
_xfer1src: dw

_xfer2dest: dw
_xfer2len: db
_x2: db
_xfer2src: dw


section "wMapBgChr", wram0[$C800]
;; BG map CHR buffer
wMapBgChr:: ds MAP_SIZE


section "wMapBgAtrb", wramx[$D800], bank[MAP_ATRB_BUFFER_BANK]
;; BG map attribute buffer
wMapBgAtrb:: ds MAP_SIZE


for I, MAP_CHUNK_BUFFER_COUNT
	if I < 8
		def _addr equ $D000 + $100 * I
	else
		def _addr equ $D000 + $100 * I + $400
	endc

	;; Buffer ID
	def CHUNK_BUFFER_{d:I} equ high(_addr) & SLOT_BUFFER

	section "wMapBufferChr{d:I}", wramx[_addr], bank[MAP_CHR_BUFFER_BANK]
	wMapBufferChr{d:I}:: ds MAP_CHUNK_SIZE

	section "wMapBufferAtrb{d:I}", wramx[_addr], bank[MAP_ATRB_BUFFER_BANK]
	wMapBufferAtrb{d:I}:: ds MAP_CHUNK_SIZE

	purge _addr
endr


section "MapEnable", rom0
;; @mut: AF
MapEnable::
	ld a, bank(map_test) :: ldh [hMapBank], a
	ld a, low(map_test) :: ldh [hMapAddr + 0], a
	ld a, high(map_test) :: ldh [hMapAddr + 1], a
	ret


section "MapSelect", rom0
MapSelect::
	ret


section "MapUpdate", rom0
MapUpdate::
	; Map address of $FFxx is 'unset'
	ldh a, [hMapAddr + 1]
	inc a
	ret z

	call MapUpdateViewChunk
	call MapUpdateCache

	; proof of concept: update north front
	call ScrollGetViewColumn
	; destX = viewX mod 32
	ld a, e :: and $1F :: ld b, a
	ldh [_destX], a
	call ScrollGetViewRow
	ld a, e :: or d :: ret z ; out of bounds
	ld a, e :: dec a :: and $1F
	ldh [_destY], a
	call _FrontNorth
	ld d, a
	jp MapSyncRow


section "MapUpdateFront", rom0

;; @param E: viewY grid coordinate
;; @ret A: North front Y coordinate
_FrontNorth:
	; [6..21]
	; 6 + ((viewY - 7) & $0F)
	ld a, e :: sub 7 :: and $0F :: add 6
	ret


_FrontSouth:
	; [25..40]
	; 25 + ((viewY + 9) & $0F)
	ld a, e :: add 9 :: and $0F :: add 25
	ret


_FrontWest:
	; [5..20]
	; 5 + ((viewX - 6) & $0F)
	ld a, e :: sub 6 :: and $0F :: add 5
	ret


_FrontEast:
	; [26..41]
	; 26 + ((viewX + 10) & $0F)
	ld a, e :: add 10 :: and $0F :: add 26
	ret


;; Transfer a row from cache to the bgmap buffers.
;; @param B: destX
;; @param D: srcY
;; @mut: AF, BC, DE, HL
MapSyncRow:
	; Configure srcX, srcLen for each slot
.configure_x_axis:
	; default start X for slot 1 & 2 = 0
	xor a
	ldh [_x1], a
	ldh [_x2], a

	; calculate srcX: row starting column (west)
	; same as the west front + 1
	ld a, b
	sub 6 :: and $0F :: add 6
	ld e, a
	; srcX will be in x0 (LHS) or x1 (middle), so we'll just branch and handle each case separately.
	cp 16
	jr c, .start_x0
.start_x1 ; if srcX in [16..31]: start in slot 1 (middle)
	; x1 = srcX - 16
	sub 16 :: ldh [_x1], a
	; len1 = 16 - x1 = 32 - srcX
	ld a, 32 :: sub e :: ldh [_xfer1len], a
	; len2 = 20 - len1
	ld b, a
	ld a, 20 :: sub b :: ldh [_xfer2len], a
	; len0 = 0
	xor a :: ldh [_xfer0len], a

	jr .configure_x_done
.start_x0 ; if srcX in [0..15]: start in slot 0 (LHS)
	; x0 = srcX
	ldh [_x0], a
	; len0 = 16 - x0
	ld a, 16 :: sub e :: ldh [_xfer0len], a
	; lenRemaining = 20 - len0
	ld b, a :: ld a, 20 :: sub b
	cp 17
	jr c, .end_x1
.end_x2 ; if lenRemaining > 16: end in slot 2
	; len2 = lenRemaining - len1
	sub 16 :: ldh [_xfer2len], a
	ld a, 16 :: ldh [_xfer1len], a
	jr .configure_x_done

.end_x1 ; lenRemaining <= 16: end in slot 1
	; len1 = lenRemaining
	ldh [_xfer1len], a
	xor a :: ldh [_xfer2len], a

.configure_x_done:
	; Configure addresses, finalise transfers

	; src[i] = slot buffer + (srcY % 16) * 16 + srcX[i]
	ld a, d
	and $0F :: swap a ; (srcY % 16) * 16
	ld b, a

	ld c, low(hMapChunkSlots) ; top
	ld a, d
	sub 16
	; if srcY in [0..15]: src in top 3 slots
	jr c, .row_x0
	ld c, low(hMapChunkSlots + 3) ; middle
	sub 16
	; if srcY in [16..31]: src in middle 3 slots
	jr c, .row_x0
	ld c, low(hMapChunkSlots + 6) ; bottom
	; else srcY in [32..47]: src in bottom 3 slots

.row_x0:
	; destination address
	ldh a, [_destX]
	ld l, a
	; multiply Y by 32
	ldh a, [_destY]
	swap a :: rlca ; mul 32 (but the lowest 5 bits are for D)
	ld e, a
	and $1F :: ld d, a
	ld a, e :: sub d :: add l :: ld e, a

	ld hl, _xfer0dest
	call _FinaliseRowSlotXfer
	inc c
	ld hl, _xfer1dest
	call _FinaliseRowSlotXfer
	inc c
	; adjust destination address to avoid wrapping onto the next destination row
	ld a, e
	sub 32
	ld e, a
	jr nc, :+
	dec d
:
	ld hl, _xfer2dest
	call _FinaliseRowSlotXfer

.process_xfers:
	; Process the transfers -- update the BG map
	wrambpush

	ld hl, _xfer0dest
	call _ProcessSlotXfer
	ld hl, _xfer1dest
	call _ProcessSlotXfer
	ld hl, _xfer2dest
	call _ProcessSlotXfer

	wrambpop
	ret


;; Finalise slot transfer configuration for row update ~~
;; @param B: common buffer offset ... (srcY % 16) * 16
;; @param C: low byte pointer to slot status
;; @param DE: destination address
;; @param HL: xfer params
;; @ret DE: destination address + length
;; @mut: AF, DE, HL
_FinaliseRowSlotXfer:
	; write destination address
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a

	; if len == 0, do nothing
	ld a, [hl+]
	and a
	ret z

	; update destination address
	add e :: ld e, a
	adc d :: sub e :: ld d, a

	ldh a, [c]
	bit bSLOT_RENDERED, a
	jr nz, :+
	; TODO: if slot is unrendered (but not NOCHUNK) -- do something...
	dec hl
	xor a :: ld [hl], a
	ret
:

	ld a, [hl+] ; xoffset
	add b
	ld [hl+], a ; src low byte

	; buffer address (src high byte)
	ldh a, [c]
	and SLOT_BUFFER :: or $D0
	ld [hl+], a

	ret


;; @param HL: xfer params
_ProcessSlotXfer:
	; dest (offset)
	ld a, [hl+] :: ld e, a
	ld a, [hl+] :: ld d, a
	; len
	ld a, [hl]
	and a :: ret z
	ld c, a
	xor a :: ld [hl+], a

	inc hl ; xoffset (skip)

	; src
	ld a, [hl+]
	ld h, [hl]
	ld l, a

	ld a, MAP_CHR_BUFFER_BANK :: ldh [rSVBK], a
	push bc :: push de :: push hl
	ld a, d :: add high(wMapBgChr) :: ld d, a
:
	ld a, [hl+]
	ld [de], a :: inc de
	dec c
	jr nz, :-

	ld a, MAP_ATRB_BUFFER_BANK :: ldh [rSVBK], a
	pop hl :: pop de :: pop bc
	ld a, d :: add high(wMapBgAtrb) :: ld d, a
:
	ld a, [hl+]
	ld [de], a :: inc de
	dec c
	jr nz, :-

	ret


section "MapSlotInfo", rom0
SlotInfo:
db -1, -1
db -1, 0
db -1, 1
db 0, -1
db 0, 0
db 0, 1
db 1, -1
db 1, 0
db 1, 1


section "MapUpdateSlot", rom0
;; Render the chunk in the given slot, if it hasn't been already.
;; @param L: index
;; @mut: AF, BC, DE, HL
MapUpdateSlot:
	ld a, l :: add low(hMapChunkSlots) :: ld c, a
	ldh a, [c]
	and SLOT_RENDERED | SLOT_NOCHUNK
	ret nz
	ldh a, [c]
	or SLOT_NOCHUNK
	ldh [c], a

	ld a, l :: add a ; index * 2
	add low(SlotInfo) :: ld l, a
	adc high(SlotInfo) :: sub l :: ld h, a

	ldh a, [hMapViewChunkY]
	add [hl] :: inc hl
	ld d, a

	ldh a, [hMapViewChunkX]
	add [hl]
	ld e, a

	; Chunk lookup
	ld hl, hMapAddr
	ld a, [hl+] :: ld h, [hl] :: ld l, a ; hMapAddr
	ld a, [hl+] :: ld h, [hl] :: ld l, a ; map.chunk_table
	call MapChunkLookup
	ret nc

	; DE = chunk buffer dest
	ldh a, [c] :: and SLOT_BUFFER :: or $D0
	ld d, a :: ld e, 0
	push de
;	push hl
	; skip atrb brushes
	inc hl :: inc hl
	ld a, MAP_CHR_BUFFER_BANK :: ldh [rSVBK], a
	call MapChunkRender

;	pop hl
	pop de
	; pointer to atrb brushes
;	ld a, [hl+] :: ld h, [hl] :: ld l, a
	ld a, MAP_ATRB_BUFFER_BANK :: ldh [rSVBK], a
	call MapChunkRender

	; update slot status
	ldh a, [c]
	xor SLOT_RENDERED | SLOT_NOCHUNK ; clear NOCHUNK & set RENDERED
	ldh [c], a
	ret


section "MapUpdateCache", rom0
MapUpdateCache:
	rombpush
	ldh a, [hMapBank]
	ld [$2000], a
	wrambpush

	call _UpdateNext
	call _UpdateNext
	;call _UpdateNext

	wrambpop
	rombpop
	ret


_UpdateNext:
	ldh a, [hMapSlotIdx] :: ld l, a
	inc a
	cp MAP_CHUNK_BUFFER_COUNT
	jr c, :+
	xor a
:
	ldh [hMapSlotIdx], a
	jp MapUpdateSlot



section "MapUpdateViewChunk", rom0
;; Update visible chunks from scroll position.
;; @mut: AF, HL
MapUpdateViewChunk:
	; Y axis view position (world dots) to chunk coords
	ld hl, wScroll.y
	ld a, [hl+]
	ld h, [hl]
	add 72 ; offset to view rect centre
	ld l, a
	adc h
	sub l
	ld h, a
	; divide by 128: hi.0 <~~ lo.7
	ld a, l
	rla
	ld a, h
	rla
	ldh [hMapViewChunkNewY], a
	; X axis view position (world dots) to chunk coords
	ld hl, wScroll.x
	ld a, [hl+]
	ld h, [hl]
	add 80 ; offset to view rect centre
	ld l, a
	adc h
	sub l
	ld h, a
	; divide by 128: hi.0 <~~ lo.7
	ld a, l
	rla
	ld a, h
	rla
	ldh [hMapViewChunkNewX], a

	call _UpdateSlotsY
	ldh a, [hMapViewChunkNewY]
	ldh [hMapViewChunkY], a
	call _UpdateSlotsX
	ldh a, [hMapViewChunkNewX]
	ldh [hMapViewChunkX], a

	ret


_UpdateSlotsY:
	ldh a, [hMapViewChunkY]
	ld l, a
	ldh a, [hMapViewChunkNewY]
	sub l
	ret z
;	jp _ResetAllSlots
	jr c, .neg
	; (newY - Y) > 0: scroll down ~~ shift up
	dec a
	jp z, _SlotsShiftUp
	jp _ResetAllSlots
.neg
	; (newY - Y) < 0: scroll up ~~ shift down
	inc a
	jp z, _SlotsShiftDown
	jp _ResetAllSlots


_UpdateSlotsX:
	ldh a, [hMapViewChunkX]
	ld l, a
	ldh a, [hMapViewChunkNewX]
	sub l
	ret z
;	jp _ResetAllSlots
	jr c, .neg
	; (newX - X) > 0: scroll right ~~ shift left
	dec a
	jp z, _SlotsShiftLeft
	jp _ResetAllSlots
.neg
	; (newX - X) < 0: scroll left ~~ shift right
	inc a
	jp z, _SlotsShiftRight
	jp _ResetAllSlots


_ResetAllSlots:
for I, MAP_CHUNK_BUFFER_COUNT
	ld a, CHUNK_BUFFER_{d:I} :: ldh [hMapChunkSlots + I], a
endr
	ret


section "MapSlotsShift", rom0
_SlotsShiftUp:
	ld hl, hMapChunkSlots
	ld a, [hl+] :: and SLOT_BUFFER :: ldh [hMapChunkSlotsScratch + 0], a
	ld a, [hl+] :: and SLOT_BUFFER :: ldh [hMapChunkSlotsScratch + 1], a
	ld a, [hl+] :: and SLOT_BUFFER :: ldh [hMapChunkSlotsScratch + 2], a
for I, MAP_CHUNK_BUFFER_COUNT
	ld a, [hl+] :: ldh [hMapChunkSlots + I], a
endr
	ret


_SlotsShiftDown:
	ld hl, hMapChunkSlotsScratch + 2
for I, MAP_CHUNK_BUFFER_COUNT
	ldh a, [hMapChunkSlots + MAP_CHUNK_BUFFER_COUNT - I - 1] :: ld [hl-], a
endr
	ldh a, [hMapChunkSlotsScratch + 2] :: and SLOT_BUFFER :: ld [hl-], a
	ldh a, [hMapChunkSlotsScratch + 1] :: and SLOT_BUFFER :: ld [hl-], a
	ldh a, [hMapChunkSlotsScratch + 0] :: and SLOT_BUFFER :: ld [hl-], a
	ret


_SlotsShiftLeft:
	ld hl, hMapChunkSlots

for I, 3
	ld b, [hl]
	ldh a, [hMapChunkSlots + I * 3 + 1] :: ld [hl+], a
	ldh a, [hMapChunkSlots + I * 3 + 2] :: ld [hl+], a
	ld a, b :: and SLOT_BUFFER :: ld [hl+], a
endr
	ret


_SlotsShiftRight:
	ld hl, hMapChunkSlots

for I, 3
	ld b, [hl]
	ldh a, [hMapChunkSlots + I * 3 + 2] :: and SLOT_BUFFER :: ld [hl+], a
	ld a, b :: ld b, [hl] :: ld [hl+], a
	ld a, b :: ld [hl+], a
endr
	ret


section "MapChunkTransfer", rom0
;; Copy a chunk (16 * 16) to a bg map buffer (32 * 32)
;; @param DE: source (chunk buffer)
;; @param HL: dest (bg map)
;; @mut: AF, BC, DE, HL
MapChunkTransfer::
	ld b, 16 ; Y
	ld c, b ; X
.loop
	ld a, [de] :: inc de
	ld [hl+], a
	dec c
	jr nz, .loop
	; bg map is 32 wide, so add an additional 16 to `dest` (HL)
	ld a, 16
	ld c, a ; reset C also!
	add l :: ld l, a
	adc h :: sub l :: ld h, a

	dec b
	jr nz, .loop
	ret


section "MapChunkRender", rom0
;; Render a chunk to a chunk buffer.
;; @param HL: source chunk brushes
;; @param DE: dest (chunk buffer)
;; @mut: AF, B, DE, HL
MapChunkRender::
.continue:
	ld a, [hl+]
	and BR__TYPE
	assert BR_TERM == 0
	ret z
	assert BR_SOLID == 1
	dec a :: jr z, .br_solid

.err_unhandled_brush:
	ld b, b
	jr .err_unhandled_brush

.br_solid:
	ld a, [hl+]
	ld b, a
	inc b ; brush data has length - 1
	ld a, [hl+]
:
	ld [de], a :: inc de
	dec b
	jr nz, :-
	jr .continue


/*
section "test/map/chunk_render", rom0
Test_map_chunk_render:
	rombopen bank(map_test)
	ld hl, map_test.chunk_table
	ld de, (0 << 8) | 4
	call MapChunkLookup
	jr nc, .err
	; skip 2 byte atrb pointer
	inc hl :: inc hl

	wrambpush bank(wMapBufferChr0)
	ld de, wMapBufferChr0
	call MapChunkRender

	ld de, wMapBufferChr0
	ld hl, wMapBgChr
	call MapChunkTransfer
	wrambpop

	ret
.err:
	ld b, b
	halt :: nop
	jr .err
*/


section "MapChunkLookup", rom0
;; @param HL: Chunk Table
;; @param D,E: row,column
;; @ret HL: Chunk
;; @ret F.C: set if successful
;; @mut: AF, B, HL
MapChunkLookup::
	ld a, [hl+]
	ld b, a
:
	ld a, [hl+]
	cp d
	jr z, .xtable
	inc hl :: inc hl
	dec b
	jr nz, :-
	jr .fail
.xtable:
	ld a, [hl+]
	ld h, [hl]
	ld l, a
	ld a, [hl+]
	ld b, a
:
	ld a, [hl+]
	cp e
	jr z, .ok
	inc hl :: inc hl
	dec b
	jr nz, :-
.fail:
	xor a ; clear F.C
	ret
.ok:
	ld a, [hl+]
	ld h, [hl]
	ld l, a
	scf
	ret


/*
section "test/map/chunk_lookup", rom0
Test_map_chunk_lookup::
	ld b, b
for Y, 6
	for X, 6
.test_{d:Y}_{d:X}:
	ld a, bank(map_test)
	ld [$2000], a
	ld hl, map_test.chunk_table
	ld de, (Y << 8) | X
	call MapChunkLookup
	ld b, b
	endr
endr
	ret

*/


section "xMapBufferInit", romx
xMapBufferInit::
	; Clear BG map
	wrambpush bank(wMapBgChr)
	ld hl, wMapBgChr
	ld bc, (MAP_SIZE - 1) + $1_01
:
	ld a, l :: ld [hl+], a
	dec c
	jr nz, :-
	dec b
	jr nz, :-

	; Clear BG attribute map
	ld a, bank(wMapBgAtrb) :: ldh [rSVBK], a
	ld hl, wMapBgAtrb
	ld bc, (MAP_SIZE - 1) + $1_01
	xor a
:
	ld [hl+], a
	dec c
	jr nz, :-
	dec b
	jr nz, :-

	wrambpop
	ret


section "MapInit", rom0
MapInit::
	ld a, $FF
	ldh [hMapBank], a
	ldh [hMapAddr + 0], a
	ldh [hMapAddr + 1], a
	ldh [hMapViewChunkY], a
	ldh [hMapViewChunkX], a
	ld a, $80
	ldh [hMapViewChunkNewY], a
	ldh [hMapViewChunkNewX], a

	call _ResetAllSlots

	xor a :: ldh [hMapSlotIdx], a

	rombopen bank(xMapBufferInit)
	jp xMapBufferInit

