include "hardware.inc"
include "stuff.rgbinc"
include "banker.rgbinc"


rsreset
export def bPalettes_SYNC_ALL rb 1
export def Palettes_SYNC_ALL equ 1 << bPalettes_SYNC_ALL


def szCOLOUR equ 2
def PALETTE_LENGTH equ 4
def szPALETTE equ PALETTE_LENGTH * szCOLOUR

;; Work only safe to start before this line (LY).
def PALETTE_SYNC_DEADLINE equ 152

def cBGPI equ $68
def cBGPD equ $69
def cOBPI equ $6A
def cOBPD equ $6B


section "rPalettes", romx
rPalettesBG::
	dw_rgb555 28,31,25, 17,27,14, 7,8,27, 20,14,8
;	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	dw_rgb555 0,15,0, 0,0,15, 31,0,0, 0,31,0
	dw_rgb555 0,0,31, 15,0,0, 0,15,0, 0,0,15
	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	dw_rgb555 0,15,0, 0,0,15, 31,0,0, 0,31,0
	dw_rgb555 0,0,31, 15,0,0, 0,15,0, 0,0,15
	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	dw_rgb555 0,15,0, 0,0,15, 31,0,0, 0,31,0
	.end

rPalettesOB::
	dw_rgb555 0,0,31, 15,0,0, 0,15,0, 0,0,15
	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	dw_rgb555 0,15,0, 0,0,15, 31,0,0, 0,31,0
	dw_rgb555 0,0,31, 15,0,0, 0,15,0, 0,0,15
	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	dw_rgb555 0,15,0, 0,0,15, 31,0,0, 0,31,0
	dw_rgb555 0,0,31, 15,0,0, 0,15,0, 0,0,15
	dw_rgb555 31,0,0, 0,31,0, 0,0,31, 15,0,0
	.end


section "hPalettes", hram
hPalettes:: db
hPalettesFadeMask:: dw


section "wPalettePal", wram0
wPalettePal_BgIdx:: db
wPalettePal_ObIdx:: db


section "wPalettes", wram0, align[8]
;; Palette buffer -- working copy of palette data.
;; Signal that a palette should be re-uploaded by setting bit 15 of the first colour in the palette.
;; (That's bit 7 of the second byte of the palette, as CGB colours are RGB555, stored little endian.)
wPalettes::
	.bg:: ds szPALETTE * 8
	.ob:: ds szPALETTE * 8
	;; Current scanning location (low byte address in palette buffer)
	.scanindex:: db


section "Palettes", rom0
PalettesInit::
	call PalettePalInit

	; load default palettes
	rombopen bank("rPalettes")
	ld b, 0
	ld c, (rPalettesBG.end - rPalettesBG) >> 3
	ld de, rPalettesBG
	call PalettesLoad
	ld b, 8
	ld c, (rPalettesOB.end - rPalettesOB) >> 3
	ld de, rPalettesOB
	call PalettesLoad

	; scanindex
	ld a, low(wPalettes.bg) + 1 :: ld [wPalettes.scanindex], a

	ld a, $FF
	ldh [hPalettesFadeMask + 0], a
	ldh [hPalettesFadeMask + 1], a
	ld a, Palettes_SYNC_ALL :: ldh [hPalettes], a
	ret


;; Get address of a palette by its index in the buffer.
;; @param A: palette index
;; @ret HL: address
;; @mut: AF, HL
PalettesIndex::
	ld hl, wPalettes.bg
	and $1F :: add a :: add a :: add a
	add l :: ld l, a
	ret


;; Load palettes from memory.
;; @param B: destination palette index
;; @param C: count -- number of palettes to copy
;; @param DE: source
;; @mut: AF, C, DE, HL
PalettesLoad::
	ld a, b
	call PalettesIndex
:
	ld a, [de] :: inc de :: ld [hl+], a
	; Mark as changed
	ld a, [de] :: inc de
	or $80
	ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	ld a, [de] :: inc de :: ld [hl+], a
	dec c
	jr nz, :-
	ret


;; @param B: destination palette index
;; @param C: count -- number of palettes to copy
;; @param DE: source (in ROMX)
;; @param H: source ROM bank
;; @mut: AF, C, DE, HL
PalettesLoadRomx::
	rombopen h
	jr PalettesLoad


;; Upload palette data
;; @mut AF, BC, DE, HL
PalettesSync::
	ldh a, [hPalettes]
	bit bPalettes_SYNC_ALL, a
	jr nz, PalettesSyncAll

	ld hl, wPalettes.scanindex
	ld l, [hl]
	ld b, 8 ; maximum scan iters
.scan:
	; check the time
	ldh a, [rLY] :: sub 144
	cp PALETTE_SYNC_DEADLINE - 144
	jr nc, .done

	bit 7, [hl]
	jr nz, .work
	ld a, l :: add 8 :: and $7F :: ld l, a
	dec b
	jr nz, .scan
.done:
	ld a, l :: ld [wPalettes.scanindex], a
	ret
.work:
	res 7, [hl] ; clear dirty flag
	dec l ; scanindex is at +1 (the high byte)

	ld c, cBGPI
	; OB if scanindex > $3F (scanindex.6 is set)
	bit 6, l
	jr z, :+
	ld c, cOBPI
:
	; Set palette index
	ld a, l
	or $80 ; auto-advance
	ldh [c], a
	inc c ; PI ~~> PD
rept 8
	ld a, [hl+] :: ldh [c], a
endr
	; inc to high byte
	inc l
	ld a, l :: and $7F :: ld l, a
	jr .scan


;; @mut: AF, BC, DE, HL
PalettesSyncAll::
	ldh a, [hPalettesFadeMask + 0] :: ld e, a
	ldh a, [hPalettesFadeMask + 1] :: ld d, a
	ld hl, wPalettes.bg
	ld c, cBGPI
	call .load
	ld hl, wPalettes.ob
	inc c ; OBPI
.load:
	ld a, $80 ; index 0, auto-advance on
	ldh [c], a
	inc c ; PI ~~> PD
rept 32
	ld a, [hl+]
	and e
	ldh [c], a
	ld a, [hl+]
	and d
	ldh [c], a
endr
	ldh a, [hPalettes]
	res bPalettes_SYNC_ALL, a
	ldh [hPalettes], a
	ret


section "PalettePal", rom0
PalettePalInit::
	xor a
	ld [wPalettePal_BgIdx], a
	ld [wPalettePal_ObIdx], a
	ret


;; @param B: source ROM bank
;; @param DE: source
;; @ret B: BG palette index [0..7]
;; @mut: AF, BC, DE, HL
PalettePalLoadBgRomx::
	rombopen b

	; FALLTHROUGH

;; @param DE: source
;; @ret B: BG palette index [0..7]
;; @mut: AF, BC, DE, HL
PalettePalLoadBg::
	ld hl, wPalettePal_BgIdx
	ld a, [hl]
	inc [hl]
	ld b, a
	ld c, 1
	jp PalettesLoad


;; @param B: source ROM bank
;; @param DE: source
;; @ret B: Palettes OBJ palette index [8..15]
;; @mut: AF, BC, DE, HL
PalettePalLoadObRomx::
	rombopen b

	; FALLTHROUGH

;; @param DE: source
;; @ret B: Palettes OBJ palette index [8..15]
;; @mut: AF, BC, DE, HL
PalettePalLoadOb::
	ld hl, wPalettePal_ObIdx
	ld a, [hl]
	inc [hl]
	add 8
	ld b, a
	ld c, 1
	jp PalettesLoad

