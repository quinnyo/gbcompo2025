if !def(Q_BANKER_INC_ftohb3co)
def Q_BANKER_INC_ftohb3co equ 1


def BANKER_STACK_SIZE equ 16


;; Address of ROM bank number stored in each bank.
def RomBankId equ $7FFF


def ROMB_LO equ $2000


;; rombsel BANK
;; Directly set the ROMX bank.
;; The current state is not preserved.
;; @mut: A
macro rombsel
	assert _NARG == 1
	ld a, \#
	ld [ROMB_LO], a
endm


;; rombopen [$BANK]
;; The current bank will be preserved and restored when returning from the enclosing subroutine.
;; Then switch to ROM bank $BANK (if supplied).
;; @mut: AF
macro rombopen
	assert _NARG <= 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ld a, [RomBankId]
	push af
	call .bankzone\@
	pop af
	ld [ROMB_LO], a
	ret
.bankzone\@
	if _NARG == 1
		ld a, \1
		ld [ROMB_LO], a
	endc
endm


;; rombpush [$BANK]
;; @mut: AF
macro rombpush
	assert _NARG == 0 || _NARG == 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ld a, [RomBankId]
	push af
if _NARG == 1
	ld a, \1
	ld [ROMB_LO], a
endc
endm


;; @mut: AF
macro rombpop
	pop af
	ld [ROMB_LO], a
endm


;; wrambsel BANK
;; Directly set the WRAMX bank.
;; The current state is not preserved.
;; @mut: A
macro wrambsel
	assert _NARG == 1
	ld a, \#
	ldh [rSVBK], a
endm


;; wrambopen [$BANK]
;; The current bank will be preserved and restored when returning from the enclosing subroutine.
;; Then switch to WRAM bank $BANK (if supplied).
;; @mut: AF
macro wrambopen
	assert _NARG <= 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ldh a, [rSVBK]
	push af
	call .bankzone\@
	pop af
	ldh [rSVBK], a
	ret
.bankzone\@
	if _NARG == 1
		ld a, \1
		ldh [rSVBK], a
	endc
endm


;; wrambpush [$BANK]
;; @mut: AF
macro wrambpush
	assert _NARG == 0 || _NARG == 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ldh a, [rSVBK]
	push af
if _NARG == 1
	ld a, \1
	ldh [rSVBK], a
endc
endm


;; @mut: AF
macro wrambpop
	pop af
	ldh [rSVBK], a
endm


;; banker_rombpush [$BANK]
;; @mut: AF, HL
macro banker_rombpush
	assert _NARG == 0 || _NARG == 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ld hl, wBankerRomb
	dec [hl]
	ld l, [hl]
	ld a, [RomBankId]
	ld [hl], a
if _NARG == 1
	ld a, \1
	ld [ROMB_LO], a
endc
endm


;; @mut: AF, HL
macro banker_rombpop
	ld hl, wBankerRomb
	ld a, [hl]
	inc [hl]
	ld l, a
	ld a, [hl]
	ld [ROMB_LO], a
endm


;; banker_wrambpush [$BANK]
;; @mut: AF, HL
macro banker_wrambpush
	assert _NARG == 0 || _NARG == 1
	if _NARG == 1
		assert fatal, strcmp("a", strlwr("\1")) != 0, "BANK in 'A' register not supported."
	endc
	ld hl, wBankerWramb
	dec [hl]
	ld l, [hl]
	ldh a, [rSVBK]
	ld [hl], a
if _NARG == 1
	ld a, \1
	ldh [rSVBK], a
endc
endm


;; @mut: AF, HL
macro banker_wrambpop
	ld hl, wBankerWramb
	ld a, [hl]
	inc [hl]
	ld l, a
	ld a, [hl]
	ldh [rSVBK], a
endm


endc ; Q_BANKER_INC_ftohb3co

