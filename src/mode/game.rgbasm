include "hardware.inc"
include "banker.rgbinc"
include "mode.rgbinc"
include "coord.rgbinc"


	mode_def modeGamePrep
	mode_def modeGame


section "modeGamePrep", romx
modeGamePrep_Enter::
	ld b, bank("assets/character_test.chr")
	ld de, startof("assets/character_test.chr")
	ld c, sizeof("assets/character_test.chr") / 16 - 1
	ld hl, $8100
	call VxLoadRom

	ld de, startof("assets/character_test.chr.pal")
	ld c, 1
	ld b, 8
	ld h, bank("assets/character_test.chr.pal")
	call PalettesLoadRomx

	call ScrollInit
	call PlayerInit
	call EntityInit
	call CollideInit
	call MapEnable

	ld a, MODE_STATE_PROCESS :: ldh [hModeState], a
	ret


modeGamePrep_Process::
	; wait for data to load
	ldh a, [hVx.task_count]
	and a
	ret nz

	ld de, rModes_modeGame
	call ModeSetActive

	jp CurtainOpen


section "modeGame", romx
modeGame_Enter::
	ld a, MODE_STATE_PROCESS :: ldh [hModeState], a
	ret


modeGame_Process::
	call PlayerUpdate

/*
	; debugfly: override player input
	ldh a, [hKeys]
	ld b, a
	xor a
	bit PADB_UP, b
	jr z, :+
	dec a
:
	bit PADB_DOWN, b
	jr z, :+
	inc a
:
	add a :: add a :: add a
	ld [wEntity + 6], a
	xor a
	bit PADB_LEFT, b
	jr z, :+
	dec a
:
	bit PADB_RIGHT, b
	jr z, :+
	inc a
:
	add a :: add a :: add a
	ld [wEntity + 2], a
*/

	call EntityUpdate
	call _ViewTargetThing

	call ScrollUpdate
	ld a, [wScroll.y + 0] :: ld [wSCY], a
	ld a, [wScroll.x + 0] :: ld [wSCX], a
	call MapUpdate

/*
	; paint trail ~~ coord verify/test
	; coord Y -> BG grid offset
	ld a, [wEntity + 8 + 0]
	rla
	ld a, [wEntity + 8 + 1]
	rla
	add a ; * 2
	add a ; * 4
	add a ; * 8
	ld l, a
	ld h, 0
	add hl, hl ; * 16
	add hl, hl ; * 32

	; coord X -> BG grid offset
	ld a, [wEntity + 4 + 0]
	rla
	ld a, [wEntity + 4 + 1]
	rla
	and $1F
	add l
	ld l, a
	adc h
	sub l
	add high(wMapBgAtrb)
	ld h, a

	; cycle BG tile palette
	wrambpush bank(wMapBgAtrb)
	ld a, [hl]
	ld b, a
	inc b
	xor b
	and $F8
	xor b
	ld [hl], a
	wrambpop
*/

	; After scrolling, adjust target object position
	ld a, [wTargetThing.y] :: ld c, a
	ldh a, [hScrollAppliedY]
	cpl :: inc a :: add c :: add 8 :: ld c, a
	ld a, [wTargetThing.x] :: ld b, a
	ldh a, [hScrollAppliedX]
	cpl :: inc a :: add b :: ld b, a

	; dirty test to show entity position
	ld e, 16
	ld d, 0
	ld hl, wOAM1
	ld a, c :: ld [hl+], a
	ld a, b :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a
	inc e :: inc e
	ld a, c :: ld [hl+], a
	ld a, b :: add 8 :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a

	ret


;; Scroll view if target is more than this distance from the screen centre.
def SCROLL_FENCE equ 24


;; @param C: dCentre -- target position relative to view centre
;; @ret A: scroll delta
_ScrollFenceThing:
	ld a, c
	and a
	ret z
	rlca
	jr c, .negative
.positive
	ld a, c
	sub SCROLL_FENCE
	ret nc
	xor a
	ret
.negative
	ld a, c
	sub -SCROLL_FENCE
	ret c
	xor a
	ret


_ViewTargetThing:
	; player entity Y position
	ld a, [wEntity + 8 + 0] :: ld c, a
	ld a, [wEntity + 8 + 1] :: ld b, a
	assert WORLD_ORIGIN == $0100
	dec b ; subtract WORLD_ORIGIN
	coord_int16 bc

	; view rect centre
	ld a, [wScroll.y + 0]
	add 144 / 2 :: ld e, a
	ld a, [wScroll.y + 1]
	adc e :: sub e :: ld d, a

	coord_sub bc, de
	ld a, c :: add 144 / 2 :: ld [wTargetThing.y], a
	call _ScrollFenceThing
	ld [wScroll.dy], a

	; player entity X position
	ld a, [wEntity + 4 + 0] :: ld c, a
	ld a, [wEntity + 4 + 1] :: ld b, a
	assert WORLD_ORIGIN == $0100
	dec b ; subtract WORLD_ORIGIN
	coord_int16 bc

	; view rect centre
	ld a, [wScroll.x + 0]
	add 160 / 2 :: ld e, a
	ld a, [wScroll.x + 1]
	adc e :: sub e

	coord_sub bc, de
	ld a, c :: add 160 / 2 :: ld [wTargetThing.x], a
	call _ScrollFenceThing
	ld [wScroll.dx], a

	ret


section "wTargetThing", wram0
wTargetThing::
	.y:: db
	.x:: db

