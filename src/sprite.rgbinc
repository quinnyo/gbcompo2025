if !def(Q_SPRITE_INC_3dMG2Z3W)
def Q_SPRITE_INC_3dMG2Z3W equ 1


def bSprite_ESC equ 7
def Sprite_END equ $80

;; Sprob coordinates are unsigned values in range [0..64)
def SprobCoordMax equ 64
def SprobOriginY equ 32
def SprobOriginX equ 32


;; sprob_raw Y, X, I, A
macro sprob_raw
	assert fail, _NARG == 4
	assert (\1) >= 0 && (\1) < 64, "sprob Y position out of range. Expected 0 <= (\1) < 64."
	assert (\2) >= 0 && (\2) < 64, "sprob X position out of range. Expected 0 <= (\2) < 64."
	db (\1), (\2), (\3), (\4)
endm


;; sprob Y, X, I, A
macro sprob
	assert fail, _NARG == 4
	sprob_raw SprobOriginY + (\1), SprobOriginX + (\2), (\3), (\4)
endm


;; sprob_opts_reset [opt]
macro sprob_opts_reset
	redef __SPROB_OPTS equ 1
	redef _sprSY equ 0
	redef _sprSX equ 0
	redef _sprSI equ 0

	sprob_opts \#
endm


;; sprob_opts [FLAG], [KEY:VALUE]
macro sprob_opts
	if !def(__SPROB_OPTS)
		sprob_opts_reset
	endc
	rept _NARG
		redef _optSepIdx equ strfind("\<1>", ":")
		if _optSepIdx != -1
			redef _optKey equs strslice("\<1>", 0, _optSepIdx)
			redef _optVal equs strslice("\<1>", _optSepIdx+1)
			if strcmp("{_optKey}", "sy") == 0
				redef _sprSY equ ({_optVal})
			elif strcmp("{_optKey}", "sx") == 0
				redef _sprSX equ ({_optVal})
			elif strcmp("{_optKey}", "si") == 0
				redef _sprSI equ ({_optVal})
			endc
			purge _optKey, _optVal
		else
			fail "Unknown sprob opt {d:I}: '{"\<I>"}'"
		endc
		shift
		purge _optSepIdx
	endr
endm


;; sprob_seq N, Y, X, I, A, [opt]
macro sprob_seq
	assert fail, _NARG >= 5
	def _sprN equ (\1)
	assert fail, _sprN >= 0
	def _sprY equ (\2)
	def _sprX equ (\3)
	def _sprI equ (\4)
	def _sprA equ (\5)
	shift 5

	sprob_opts \#

	rept _sprN
		sprob _sprY, _sprX, _sprI, _sprA
		redef _sprY equ _sprY + _sprSY
		redef _sprX equ _sprX + _sprSX
		redef _sprI equ _sprI + _sprSI
	endr

	purge _sprN, _sprY, _sprX, _sprI, _sprA
endm


macro sprob_end
	assert fail, _NARG == 0
	db Sprite_END
endm


endc ; Q_SPRITE_INC_3dMG2Z3W

