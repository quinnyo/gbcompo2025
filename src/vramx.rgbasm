include "hardware.inc"
include "banker.rgbinc"


;; Set when background/HBlank transfers are started.
def VX_HBLANK_ACTIVE equ 1

rsreset
def TASK_NIL rb 1
;; { wram_addr source, vram_addr dest, length }
;; wram_addr incl bank in the low 3 bits.
;; vram_addr incl bank in bit 0.
def TASK_LOAD_WRAM rb 1
;; { rom_bank, rom_addr source, vram_addr dest, length }
;; vram_addr incl bank in bit 0.
def TASK_LOAD_ROM rb 1
;; { strip start, length }
def TASK_SYNC_BG_CHR rb 1
;; { strip start, length }
def TASK_SYNC_BG_ATRB rb 1

def TASK_LOAD_WRAM_SIZE equ 1 + 5
def TASK_LOAD_ROM_SIZE equ 1 + 6
def TASK_SYNC_BG_SIZE equ 1 + 2


def QUEUE_CAPACITY equ 64


section "wVxQueue", wram0, align[8]
wVxQueue:
	ds QUEUE_CAPACITY


section "hVx", hram
hVxQueue:
	.front: db
	;; used (allocated) bytes
	.length: db

hVx::
	;; number of tasks in queue
	.task_count:: db
	.status:: db

_scrx: db


section "Vramx", rom0
VramxInit::
	xor a :: ldh [hVx.status], a

	ld hl, wVxQueue
	ld a, TASK_NIL
	ld c, QUEUE_CAPACITY
	call MemFillSmall
	ld hl, startof("hVx")
	ld c, sizeof("hVx")
	xor a
	call MemFillSmall

	ret


;; Transfer strips (half-rows) from BG CHR map buffer to VRAM BG map.
;; @param E: start strip in [0..64)
;; @param C: Length
;; @mut: AF, HL
VxSyncBgChr::
	ld h, TASK_SYNC_BG_SIZE
	call _QueueAlloc
	ret nc
	ld a, TASK_SYNC_BG_CHR :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, c :: ld [hl+], a
	ret


;; Transfer strips (half-rows) from BG ATRB map buffer to VRAM BG ATRB map.
;; @param E: start strip in [0..64)
;; @param C: Length
;; @mut: AF, HL
VxSyncBgAtrb::
	ld h, TASK_SYNC_BG_SIZE
	call _QueueAlloc
	ret nc
	ld a, TASK_SYNC_BG_ATRB :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, c :: ld [hl+], a
	ret


;; Transfer memory from WRAM to VRAM
;; @param DE: WRAM source address. Low byte to include WRAM bank in bits `[0..2]`.
;; @param HL: VRAM destination address. Low byte to include VRAM bank in bit `0`
;; @param C: Length / 16 - 1
;; @mut: AF, DE, HL
VxLoadWram::
	ld a, c
	cp $40
	jr nc, .err_oversize
	push hl
	ld h, TASK_LOAD_WRAM_SIZE
	call _QueueAlloc
	jr nc, .abort
	ld a, TASK_LOAD_WRAM :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a
	pop de
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a
	ld a, c :: ld [hl+], a
	ret
.abort:
	pop hl
	ret
.err_oversize:
	ld b, b
	jr .err_oversize


;; Transfer memory from ROM to VRAM
;; @param B: source bank
;; @param DE: ROM source address.
;; @param HL: VRAM destination address. Low byte to include VRAM bank in bit `0`
;; @param C: Length / 16 - 1
;; @mut: AF, DE, HL
VxLoadRom::
	ld a, c
	cp $40
	jr c, .nosplit
.split:
	ld a, h :: ldh [_scrx], a
	ld h, TASK_LOAD_ROM_SIZE * 2
	call _QueueCanAlloc
	ret nc
	ldh a, [_scrx] :: ld h, a

	; sz0 = (sz / 2)
	; sz1 = sz - sz1
	ld a, c :: srl c :: sub c
	ldh [_scrx], a
	push hl
	push de
	call VxLoadRom.nosplit

.part1
	; offset1 = (sz0 + 1) * 16
	ld a, c :: inc a :: add a ; (sz0 + 1) * 2
	ld l, a :: ld h, 0
	add hl, hl ; * 4
	add hl, hl ; * 8
	add hl, hl ; * 16
	ld d, h :: ld e, l

	ld h, TASK_LOAD_ROM_SIZE
	call _QueueAlloc
	jr nc, .panic

	; { source bank, source, dest, length }
	ld a, TASK_LOAD_ROM :: ld [hl+], a
	ld a, b :: ld [hl+], a
	ld b, h :: ld c, l
	pop hl ; source0
	add hl, de ; source1 = offset1 + source0
	ld a, l :: ld [bc], a :: inc bc
	ld a, h :: ld [bc], a :: inc bc
	pop hl ; dest0
	add hl, de ; dest1 = offset1 + dest0
	ld a, l :: ld [bc], a :: inc bc
	ld a, h :: ld [bc], a :: inc bc
	ldh a, [_scrx] :: ld [bc], a ; sz1
	ret

.part0:
.nosplit:
	push hl
	ld h, TASK_LOAD_ROM_SIZE
	call _QueueAlloc
	jr nc, .panic
	; { source bank, source, dest, length }
	ld a, TASK_LOAD_ROM :: ld [hl+], a
	ld a, b :: ld [hl+], a
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a
	pop de
	ld a, e :: ld [hl+], a
	ld a, d :: ld [hl+], a
	ld a, c :: ld [hl+], a
	ret

.abort:
	pop hl
	ret

.panic:
	ld b, b
	jr .panic


;; Start the VRAM update and DMA transfers. To be called during VBlank.
;;
;; Changes banks if needed and **DOES NOT RESTORE THE PREVIOUS STATE**.
;; By default, the VRAM (`VBK`) and WRAM (`SVBK`) banks are used.
;;
;; This function sets the VRAM bank and it **MUST NOT BE CHANGED** before
;; calling `VramxSync`.
;;
;; @mut: AF, BC, DE, HL
VramxBeginUpdate::
	ldh a, [hVx.status]
	and a
	jp nz, .err_nonzero_status

	ldh a, [rLY]
	cp 148
	ret nc

	; process queue if not empty
	ldh a, [hVx.task_count]
	and a
	jr z, .do_map_sync

.do_queue:
	call _QueueProcess
	ret nc
	ld a, c :: ldh [rHDMA5], a
	ldh a, [rLY]
	cp 148
	jr c, .do_queue
	ret

.do_map_sync:
	ldh a, [rLY] :: sub 144
	cp 5
	ret nc
	; BG map attributes (VBlank immediate HDMA)
	ld a, bank(wMapBgAtrb) :: ldh [rSVBK], a
	ld a, 1 :: ldh [rVBK], a
	ld a, high(wMapBgAtrb) :: ldh [rHDMA1], a
	ld a, $98 :: ldh [rHDMA3], a
	xor a :: ldh [rHDMA2], a :: ldh [rHDMA4], a
	ld a, $3F :: ldh [rHDMA5], a

	; BG map CHR codes (HBlank HDMA)
	xor a
	ldh [rVBK], a
	ldh [rHDMA2], a :: ldh [rHDMA4], a
	ld a, high(wMapBgChr) :: ldh [rHDMA1], a
	ld a, $98 :: ldh [rHDMA3], a
	ld a, $80 | $3F :: ldh [rHDMA5], a

	ld a, VX_HBLANK_ACTIVE :: ldh [hVx.status], a
	ret
.err_nonzero_status:
	ld b, b
	ret


;; Block until HBlank jobs are complete.
;; @mut: AF
VramxSync::
	ldh a, [hVx.status]
	and a :: jp z, _QueueCheckReset

:
	ldh a, [rHDMA5]
	inc a
	jr nz, :-

	; FALLTHROUGH

_Deactivate:
	xor a :: ldh [hVx.status], a
	jp _QueueCheckReset


;; @param H: size
;; @ret F.C: if successful
;; @mut: AF
_QueueCanAlloc:
	ldh a, [hVxQueue.length] :: add h
	cp QUEUE_CAPACITY
	ret


;; Allocate the next slot in the queue...
;; @param H: size
;; @ret F.C: if successful
;; @ret HL: pointer to allocated queue memory
;; @mut: AF, HL
_QueueAlloc:
	ldh a, [hVxQueue.length] :: ld l, a
	add h
	cp QUEUE_CAPACITY
	ret nc ; no fits
	ldh [hVxQueue.length], a
	ldh a, [hVx.task_count]
	inc a
	ldh [hVx.task_count], a
	ld h, high(wVxQueue)
	scf
	ret


;; Reset queue if it has been completed.
;; @mut: AF, HL
_QueueCheckReset:
	; NOTE: The whole queue thing is pretty bad. The obvious way to improve it
	;   is to implement a ring buffer so the queue can operate continuously.

	; Unfinished task_count == 0 && length > 0, there were tasks and they have been completed.
	ldh a, [hVx.task_count]
	and a
	ret nz

	ldh a, [hVxQueue.length]
	and a
	ret z

	; FALLTHROUGH

;; @mut: AF, HL
_QueueReset:
	xor a
	ldh [hVxQueue.length], a
	ldh [hVxQueue.front], a
	ldh [hVx.task_count], a

	ld h, high(wVxQueue)
	ld l, QUEUE_CAPACITY - 1
	ld a, TASK_NIL
:
	ld [hl], a
	dec l
	jr nz, :-
	ret


;; Process the first task in the queue -- configures (but does not start) HDMA.
;; @ret C: HDMA length parameter (HDMA5)
;; @ret F.C: if successful -- HDMA configured
;; @mut: AF, BC, DE, HL
_QueueProcess:
	ldh a, [hVx.task_count]
	and a
	ret z
	ldh a, [hVxQueue.front]
	ld e, a
	ld d, high(wVxQueue)
	ld a, [de] :: inc de
	call _TaskSwitch
	jr nc, .err
	ld a, e :: ldh [hVxQueue.front], a
	ldh a, [hVx.task_count] :: dec a :: ldh [hVx.task_count], a
	scf
	ret
.err:
	ld b, b
	jr .err


;; @param DE: queue .front, *this+1
;; @ret E: new queue .front
;; @ret C: HDMA length
;; @ret F.C: if successful -- HDMA configured
_TaskSwitch:
	dec a :: jr z, _TaskLoadWram ; TASK_LOAD_WRAM
	dec a :: jr z, _TaskLoadRom ; TASK_LOAD_ROM
	dec a :: jr z, _TaskSyncBgChr ; TASK_SYNC_BG_CHR
	dec a :: jr z, _TaskSyncBgAtrb ; TASK_SYNC_BG_ATRB
.err_unknown:
	ld b, b
	jr .err_unknown


_TaskLoadWram:
	; { source, dest, length }

	ld a, [de] :: inc de :: ldh [rHDMA2], a
	and $07 :: ldh [rSVBK], a ; WRAM bank in source addr
	ld a, [de] :: inc de :: ldh [rHDMA1], a

	jr _TaskLoadMemTail


_TaskLoadRom:
	; { bank, source, dest, length }

	ld a, [de] :: inc de :: ld [ROMB_LO], a

	ld a, [de] :: inc de :: ldh [rHDMA2], a
	ld a, [de] :: inc de :: ldh [rHDMA1], a

	; FALLTHROUGH

_TaskLoadMemTail:
	ld a, [de] :: inc de :: ldh [rHDMA4], a
	and $01 :: ldh [rVBK], a ; VRAM bank in dest addr
	ld a, [de] :: inc de :: ldh [rHDMA3], a

	ld a, [de] :: inc de :: ld c, a

	scf
	ret


_TaskSyncBgChr:
	ld a, 0 :: ldh [rVBK], a
	ld c, high(wMapBgChr)
	jr _TaskSyncBgTail


_TaskSyncBgAtrb:
	ld a, bank(wMapBgAtrb) :: ldh [rSVBK], a
	ld a, 1 :: ldh [rVBK], a
	ld c, high(wMapBgAtrb)

	; FALLTHROUGH

;; @param C: source buffer address high byte
_TaskSyncBgTail:
	ld a, [de] :: inc de
	rlca :: rlca :: ld l, a ; * 4
	xor a :: ld h, a
	add hl, hl ; * 8
	add hl, hl ; * 16

	ld a, h :: add c :: ldh [rHDMA1], a
	ld a, l :: ldh [rHDMA2], a :: ldh [rHDMA4], a
	ld a, h :: add high($9800) :: ldh [rHDMA3], a

	ld a, [de] :: inc de
	ld c, a

	scf
	ret

